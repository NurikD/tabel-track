# app/tasks.py
from aiohttp import request
import requests
from celery import shared_task
from django.core.mail import send_mail
from django.conf import settings
import asyncio
import json
from .models import CustomUser, LeaveRequest

@shared_task
def notify_approver_email(employee_full_name, leave_type, start_date, end_date, approver_email):
    subject = f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ {leave_type}"
    message = (
        f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee_full_name} –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ {leave_type} "
        f"—Å {start_date} –ø–æ {end_date}.\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–≥–ª–∞—Å—É–π—Ç–µ –∑–∞—è–≤–∫—É –≤ —Å–∏—Å—Ç–µ–º–µ."
    )
    send_mail(
        subject,
        message,
        settings.DEFAULT_FROM_EMAIL,
        [approver_email],
        fail_silently=False
    )

@shared_task
def send_result_to_employee(employee_email, leave_type, start_date, end_date, status):
    subject = f"üìù –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ {leave_type} {status_display(status)}"
    message = (
        f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ {leave_type} —Å {start_date} –ø–æ {end_date} –±—ã–ª–∞ {status_display(status)}.\n\n"
        f"–°–ø–∞—Å–∏–±–æ!"
    )
    send_mail(
        subject,
        message,
        settings.DEFAULT_FROM_EMAIL,
        [employee_email],
        fail_silently=False
    )

@shared_task
def notify_approver_telegram(request_id, employee_full_name, leave_type, start_date, end_date):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –≤ Telegram —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö approver'–æ–≤ —Å telegram_id
        approvers = CustomUser.objects.filter(
            role='approver',
            telegram_id__isnull=False
        )


        if not approvers:
            print("–ù–µ—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º Telegram")
            return

        # –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        message_text = (
            f"üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ\n\n"
            f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee_full_name}\n"
            f"üìÖ –¢–∏–ø: {leave_type}\n"
            f"üóì –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        # –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", "callback_data": f"approve_{request_id}"},
                    {"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data": f"reject_{request_id}"}
                ],
                [
                    {"text": "üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", "callback_data": f"details_{request_id}"}
                ]
            ]
        }

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥–æ–º—É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é
        for approver in approvers:
            send_telegram_message.delay(
                chat_id=approver.telegram_id,
                text=message_text.replace("{approver_name}", approver.full_name),
                reply_markup=keyboard
            )


    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

@shared_task
def notify_employee_telegram(employee_telegram_id, leave_type, start_date, end_date, status):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    if not employee_telegram_id:
        return

    status_emoji = {
        'approved': '‚úÖ',
        'rejected': '‚ùå',
        'pending': '‚è≥'
    }

    message_text = (
        f"{status_emoji.get(status, 'üìù')} –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω\n\n"
        f"üìÖ –¢–∏–ø: {leave_type}\n"
        f"üóì –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status_display(status)}"
    )

    send_telegram_message.delay(
        chat_id=employee_telegram_id,
        text=message_text
    )

@shared_task
def send_telegram_message(chat_id, text, reply_markup=None):
    try:
        bot_token = settings.TELEGRAM_BOT_TOKEN
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"

        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        }

        if reply_markup:
            data["reply_markup"] = json.dumps(reply_markup)

        print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram:", data)

        response = requests.post(url, data=data)

        print("üì® –û—Ç–≤–µ—Ç Telegram:", response.status_code, response.text)

        if response.status_code != 200:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", response.text)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_telegram_message: {e}")

def status_display(status):
    return {
        'approved': '–æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ',
        'rejected': '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå',
        'pending': '–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ ‚è≥'
    }.get(status, '–æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞')