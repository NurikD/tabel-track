# handlers/approve.py
from aiogram import Router, types, F
from aiogram.filters import CommandObject, Command
from aiohttp import request
import requests
from app.models import CustomUser, LeaveRequest
from asgiref.sync import sync_to_async
import json
from django.conf import settings
from django.utils import timezone

router = Router()

@router.callback_query(F.data.startswith("approve_"))
async def approve_request(callback: types.CallbackQuery):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram"""
    request_id = callback.data.split("_")[1]
    await process_request_action(callback, request_id, "approve")

@router.callback_query(F.data.startswith("reject_"))
async def reject_request(callback: types.CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram"""
    request_id = callback.data.split("_")[1]
    await process_request_action(callback, request_id, "reject")

@router.callback_query(F.data.startswith("details_"))
async def show_request_details(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞—è–≤–∫–∏"""
    request_id = callback.data.split("_")[1]

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        approver = await sync_to_async(
            lambda: CustomUser.objects.get(telegram_id=callback.from_user.id, role='approver')
        )()

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        leave_request = await sync_to_async(
            lambda: LeaveRequest.objects.select_related('user').get(id=request_id)
        )()

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        days_count = (leave_request.end_date - leave_request.start_date).days + 1

        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç–ø—É—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        total_used = await sync_to_async(
            lambda: sum(
                (r.end_date - r.start_date).days + 1
                for r in LeaveRequest.objects.filter(
                    user=leave_request.user,
                    leave_type='vacation',
                    status='approved'
                )
            )
        )()

        available_days = 44 - total_used

        details_text = (
            f"üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞—è–≤–∫–∏ #{request_id}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {leave_request.user.get_full_name()}\n"
            f"üè¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {leave_request.user.get_position_display() if hasattr(leave_request.user, 'get_position_display') else leave_request.user.position}\n"
            f"üìÖ –¢–∏–ø –æ—Ç–ø—É—Å–∫–∞: {leave_request.get_leave_type_display()}\n"
            f"üóì –ü–µ—Ä–∏–æ–¥: {leave_request.start_date.strftime('%d.%m.%Y')} - {leave_request.end_date.strftime('%d.%m.%Y')}\n"
            f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {days_count}\n"
            f"üìù –°—Ç–∞—Ç—É—Å: {get_status_display(leave_request.status)}\n"
            f"üïê –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {leave_request.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        )

        if leave_request.leave_type == 'vacation':
            details_text += f"üèñ –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç–ø—É—Å–∫–∞: {available_days} –¥–Ω.\n"

        if leave_request.reason:
            details_text += f"üìã –ü—Ä–∏—á–∏–Ω–∞: {leave_request.reason}\n"

        # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        if leave_request.status == 'pending':
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{request_id}"),
                    types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{request_id}")
                ]
            ])
            await callback.message.edit_text(details_text, reply_markup=keyboard)
        else:
            await callback.message.edit_text(details_text)

    except CustomUser.DoesNotExist:
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫", show_alert=True)
    except LeaveRequest.DoesNotExist:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def process_request_action(callback: types.CallbackQuery, request_id: str, action: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞—è–≤–∫–æ–π (–æ–¥–æ–±—Ä–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        approver = await sync_to_async(
            lambda: CustomUser.objects.get(telegram_id=callback.from_user.id, role='approver')
        )()

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        leave_request = await sync_to_async(
            lambda: LeaveRequest.objects.select_related('user').get(id=request_id, status='pending')
        )()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        leave_request.status = 'approved' if action == 'approve' else 'rejected'
        leave_request.reviewed_by = approver
        leave_request.reviewed_at = timezone.now()

        await sync_to_async(leave_request.save)()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –≤ Telegram
        if leave_request.user.telegram_id:
            await notify_employee_telegram(
                leave_request.user.telegram_id,
                leave_request.get_leave_type_display(),
                leave_request.start_date.strftime('%d.%m.%Y'),
                leave_request.end_date.strftime('%d.%m.%Y'),
                leave_request.status
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email (—á–µ—Ä–µ–∑ Celery)
        from app.tasks import send_result_to_employee
        send_result_to_employee.delay(
            leave_request.user.email,
            leave_request.get_leave_type_display(),
            leave_request.start_date.strftime('%d.%m.%Y'),
            leave_request.end_date.strftime('%d.%m.%Y'),
            leave_request.status
        )

        action_text = "–æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ" if action == 'approve' else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå"
        success_message = (
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} {action_text}\n"
            f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {leave_request.user.get_full_name()}\n"
            f"üìÖ {leave_request.get_leave_type_display()}: {leave_request.start_date.strftime('%d.%m.%Y')} - {leave_request.end_date.strftime('%d.%m.%Y')}"
        )

        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(success_message)
        await callback.answer(f"–ó–∞—è–≤–∫–∞ {action_text}", show_alert=False)

    except CustomUser.DoesNotExist:
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫", show_alert=True)
    except LeaveRequest.DoesNotExist:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.message(Command("requests"))
async def show_pending_requests(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        approver = await sync_to_async(
            lambda: CustomUser.objects.get(telegram_id=message.from_user.id, role='approver')
        )()

        # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏
        pending_requests = await sync_to_async(
            lambda: list(LeaveRequest.objects.filter(status='pending').select_related('user').order_by('-created_at'))
        )()

        if not pending_requests:
            await message.answer("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è")
            return

        response_text = f"üìã –ó–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ ({len(pending_requests)}):\n\n"

        for req in pending_requests:
            days_count = (req.end_date - req.start_date).days + 1
            response_text += (
                f"#{req.id} {req.user.get_full_name()}\n"
                f"üìÖ {req.get_leave_type_display()}: {req.start_date.strftime('%d.%m')} - {req.end_date.strftime('%d.%m')} ({days_count} –¥–Ω.)\n"
                f"üïê {req.created_at.strftime('%d.%m %H:%M')}\n\n"
            )

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä–≤—ã–º –∑–∞—è–≤–∫–∞–º
        keyboard_buttons = []
        for req in pending_requests[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5 –∑–∞—è–≤–æ–∫
            keyboard_buttons.append([
                types.InlineKeyboardButton(
                    text=f"#{req.id} {req.user.get_full_name()[:15]}...",
                    callback_data=f"details_{req.id}"
                )
            ])

        if keyboard_buttons:
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            await message.answer(response_text, reply_markup=keyboard)
        else:
            await message.answer(response_text)

    except CustomUser.DoesNotExist:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫")

async def notify_employee_telegram(telegram_id, leave_type, start_date, end_date, status):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"""
    status_emoji = {
        'approved': '‚úÖ',
        'rejected': '‚ùå',
        'pending': '‚è≥'
    }

    status_text = {
        'approved': '–æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ',
        'rejected': '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå',
        'pending': '–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ ‚è≥'
    }

    message_text = (
        f"{status_emoji.get(status, 'üìù')} –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω\n\n"
        f"üìÖ –¢–∏–ø: {leave_type}\n"
        f"üóì –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status_text.get(status, '–æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞')}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
    try:
        bot_token = settings.TELEGRAM_BOT_TOKEN
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"

        data = {
            "chat_id": telegram_id,
            "text": message_text,
            "parse_mode": "HTML"
        }

        requests.post(url, data=data)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def get_status_display(status):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å"""
    return {
        'pending': '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ ‚è≥',
        'approved': '–û–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ',
        'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå'
    }.get(status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')