from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.models import CustomUser, LeaveRequest
from asgiref.sync import sync_to_async
from django.utils import timezone
from datetime import datetime, date, timedelta
from django.db.models import F, ExpressionWrapper, fields
from app.tasks import notify_approver_telegram

import tempfile, subprocess, os, re
import speech_recognition as sr

router = Router()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∑–∞—è–≤–æ–∫
PENDING_REQUESTS = {}

WORDS_TO_NUM = {
    "–ø–µ—Ä–≤–æ–≥–æ": 1, "–≤—Ç–æ—Ä–æ–≥–æ": 2, "—Ç—Ä–µ—Ç—å–µ–≥–æ": 3, "—á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ": 4, "–ø—è—Ç–æ–≥–æ": 5,
    "—à–µ—Å—Ç–æ–≥–æ": 6, "—Å–µ–¥—å–º–æ–≥–æ": 7, "–≤–æ—Å—å–º–æ–≥–æ": 8, "–¥–µ–≤—è—Ç–æ–≥–æ": 9, "–¥–µ—Å—è—Ç–æ–≥–æ": 10,
    "–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ": 11, "–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ": 12, "—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ": 13, "—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ": 14,
    "–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ": 15, "—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ": 16, "—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ": 17, "–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ": 18,
    "–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ": 19, "–¥–≤–∞–¥—Ü–∞—Ç–æ–≥–æ": 20, "–¥–≤–∞–¥—Ü–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ": 21, "–¥–≤–∞–¥—Ü–∞—Ç—å –≤—Ç–æ—Ä–æ–≥–æ": 22,
    "–¥–≤–∞–¥—Ü–∞—Ç—å —Ç—Ä–µ—Ç—å–µ–≥–æ": 23, "–¥–≤–∞–¥—Ü–∞—Ç—å —á–µ—Ç–≤—ë—Ä—Ç–æ–≥–æ": 24, "–¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç–æ–≥–æ": 25,
    "–¥–≤–∞–¥—Ü–∞—Ç—å —à–µ—Å—Ç–æ–≥–æ": 26, "–¥–≤–∞–¥—Ü–∞—Ç—å —Å–µ–¥—å–º–æ–≥–æ": 27, "–¥–≤–∞–¥—Ü–∞—Ç—å –≤–æ—Å—å–º–æ–≥–æ": 28,
    "–¥–≤–∞–¥—Ü–∞—Ç—å –¥–µ–≤—è—Ç–æ–≥–æ": 29, "—Ç—Ä–∏–¥—Ü–∞—Ç–æ–≥–æ": 30, "—Ç—Ä–∏–¥—Ü–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ": 31,
    "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9, "10": 10,
    "11": 11, "12": 12, "13": 13, "14": 14, "15": 15, "16": 16, "17": 17, "18": 18, "19": 19,
    "20": 20, "21": 21, "22": 22, "23": 23, "24": 24, "25": 25, "26": 26, "27": 27, "28": 28,
    "29": 29, "30": 30, "31": 31,
}

MONTHS = {
    "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4, "–º–∞—è": 5, "–∏—é–Ω—è": 6,
    "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8, "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12,
}

@router.message(lambda msg: msg.voice)
async def handle_voice_request(message: types.Message):
    user = await sync_to_async(CustomUser.objects.filter(telegram_id=message.from_user.id).first)()
    if not user:
        await message.answer("‚ùó –ü—Ä–∏–≤—è–∂–∏—Ç–µ Telegram –∫ –∞–∫–∫–∞—É–Ω—Ç—É.")
        return

    await message.answer("üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
    file = await message.bot.get_file(message.voice.file_id)
    ogg = tempfile.mktemp(suffix=".ogg")
    wav = ogg.replace(".ogg", ".wav")
    await message.bot.download_file(file.file_path, ogg)
    subprocess.run(["ffmpeg", "-i", ogg, wav], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    recognizer = sr.Recognizer()
    with sr.AudioFile(wav) as source:
        audio = recognizer.record(source)

    try:
        text = recognizer.recognize_google(audio, language="ru-RU")
        print(f"[VOICE TEXT]: {text}")
    except:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
        os.remove(ogg), os.remove(wav)
        return
    finally:
        os.remove(ogg), os.remove(wav)

    text = text.lower()

    # –¢–∏–ø –æ—Ç–ø—É—Å–∫–∞
    type_match = re.search(r"(–æ—Ç–ø—É—Å–∫|–±–æ–ª—å–Ω–∏—á–Ω—ã–π|–∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞)", text)
    if not type_match:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ—Ç–ø—É—Å–∫–∞.")
        return

    leave_type_map = {
        "–æ—Ç–ø—É—Å–∫": "vacation",
        "–±–æ–ª—å–Ω–∏—á–Ω—ã–π": "sick",
        "–∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞": "business",
    }
    leave_type = leave_type_map[type_match.group(1)]

    # –ü–æ–∏—Å–∫ –¥–∞—Ç—ã: "—Å –ø–µ—Ä–≤–æ–≥–æ –ø–æ 16 –Ω–æ—è–±—Ä—è" –∏–ª–∏ "–Ω–∞ 19 –¥–µ–∫–∞–±—Ä—è"
    date_match = re.search(
        r"(?:—Å\s+(\w+)(?:\s+–ø–æ\s+(\w+))?|(–Ω–∞)\s+(\w+))\s+(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)",
        text
    )

    if not date_match:
        await message.answer(f"üó£ –¢–µ–∫—Å—Ç: {text}\n\n‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—ã.")
        return

    try:
        current_year = date.today().year
        # –ï—Å–ª–∏ –µ—Å—Ç—å "—Å ... –ø–æ ..." (–≥—Ä—É–ø–ø—ã 1 –∏ 2)
        if date_match.group(1):
            start_day = WORDS_TO_NUM[date_match.group(1)]
            end_day = WORDS_TO_NUM.get(date_match.group(2), start_day)  # –ï—Å–ª–∏ "–ø–æ" –Ω–µ —É–∫–∞–∑–∞–Ω–æ, —Ç–æ –æ–¥–∏–Ω –¥–µ–Ω—å
            month = MONTHS[date_match.group(5)]
        # –ï—Å–ª–∏ –µ—Å—Ç—å "–Ω–∞ ..." (–≥—Ä—É–ø–ø—ã 3 –∏ 4)
        else:
            start_day = WORDS_TO_NUM[date_match.group(4)]
            end_day = start_day  # –û–¥–∏–Ω –¥–µ–Ω—å
            month = MONTHS[date_match.group(5)]

        start_date = date(current_year, month, start_day)
        end_date = date(current_year, month, end_day)

        if start_date > end_date:
            start_date, end_date = end_date, start_date
    except:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –∑–∞—è–≤–æ–∫
    overlapping = await sync_to_async(
        lambda: LeaveRequest.objects.filter(
            user=user,
            status__in=['pending', 'approved'],
            start_date__lte=end_date,
            end_date__gte=start_date
        ).exists()
    )()
    if overlapping:
        await message.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞, –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∞—è —ç—Ç–∏ –¥–∞—Ç—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –æ—Ç–ø—É—Å–∫–∞
    total_used = await sync_to_async(
        lambda: sum(
            (r.end_date - r.start_date).days + 1
            for r in LeaveRequest.objects.filter(
                user=user,
                leave_type='vacation',
                status='approved'
            )
        )
    )()

    available_days = 44 - total_used
    requested_days = (end_date - start_date).days + 1

    if leave_type == "vacation" and requested_days > available_days:
        await message.answer(
            f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ç–ø—É—Å–∫–∞: –¥–æ—Å—Ç—É–ø–Ω–æ {available_days} –¥–Ω., –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ {requested_days}."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π 14-–¥–Ω–µ–≤–Ω—ã–π –æ—Ç–ø—É—Å–∫
    if leave_type == "vacation":
        has_14day = await sync_to_async(
            lambda: LeaveRequest.objects.filter(
                user=user,
                leave_type='vacation',
                status='approved'
            ).annotate(
                days=ExpressionWrapper(
                    F('end_date') - F('start_date') + timedelta(days=1),
                    output_field=fields.DurationField()
                )
            ).filter(days__gte=timedelta(days=14)).exists()
        )()
        if not has_14day and requested_days < 14:
            await message.answer("‚ö†Ô∏è –ü–æ –¢–ö –†–§ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç–ø—É—Å–∫ –≤ –≥–æ–¥—É –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 14 –¥–Ω–µ–π.")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞—è–≤–∫–∏
    leave_type_text = type_match.group(1)
    request_text = (
        f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
        f"–¢–∏–ø: {leave_type_text}\n"
        f"–° {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {requested_days} –¥–Ω.\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å?"
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{message.message_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_{message.message_id}")
        ]
    ])

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    PENDING_REQUESTS[message.message_id] = {
        "user": user,
        "leave_type": leave_type,
        "start_date": start_date,
        "end_date": end_date,
        "leave_type_text": leave_type_text,
        "type_match": type_match
    }

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(request_text, reply_markup=markup)

@router.callback_query(lambda c: c.data.startswith(("confirm_", "cancel_")))
async def handle_confirmation(callback: types.CallbackQuery):
    action, message_id = callback.data.split("_")
    message_id = int(message_id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
    request_data = PENDING_REQUESTS.get(message_id)
    if not request_data:
        await callback.message.edit_text("‚è≥ –ó–∞—è–≤–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        await callback.answer()
        return

    user = request_data["user"]
    leave_type = request_data["leave_type"]
    start_date = request_data["start_date"]
    end_date = request_data["end_date"]
    leave_type_text = request_data["leave_type_text"]
    type_match = request_data["type_match"]

    if action == "confirm":
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
        leave = LeaveRequest(
            user=user,
            leave_type=leave_type,
            start_date=start_date,
            end_date=end_date,
            status='pending',
            created_at=timezone.now()
        )
        await sync_to_async(leave.save)()

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é
        notify_approver_telegram.delay(
            request_id=leave.id,
            employee_full_name=user.full_name,
            leave_type=leave_type,
            start_date=start_date.strftime('%d.%m.%Y'),
            end_date=end_date.strftime('%d.%m.%Y')
        )

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.message.edit_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ {leave_type_text} —Å {start_date.strftime('%d.%m')} –ø–æ {end_date.strftime('%d.%m')} —Å–æ–∑–¥–∞–Ω–∞!",
            reply_markup=None
        )
    else:
        # –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏
        await callback.message.edit_text(
            "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=None
        )

    # –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    del PENDING_REQUESTS[message_id]
    await callback.answer()