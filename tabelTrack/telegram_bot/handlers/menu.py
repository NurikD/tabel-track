# handlers/menu.py
from aiogram import Router, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from asgiref.sync import sync_to_async
from app.models import CustomUser, LeaveRequest
from django.db.models import Q
from datetime import datetime

router = Router()

def get_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"), KeyboardButton(text="üìä –ú–æ–∏ –∑–∞—è–≤–∫–∏")],
            [KeyboardButton(text="üìÖ –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç–ø—É—Å–∫–∞"), KeyboardButton(text="üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞—è–≤–∫–∞")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_request_type_menu():
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèñÔ∏è –ï–∂–µ–≥–æ–¥–Ω—ã–π –æ—Ç–ø—É—Å–∫", callback_data="request_vacation")],
        [InlineKeyboardButton(text="üè• –ë–æ–ª—å–Ω–∏—á–Ω—ã–π", callback_data="request_sick")],
        [InlineKeyboardButton(text="‚úàÔ∏è –ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞", callback_data="request_business")],
        [InlineKeyboardButton(text="üìû –û—Ç–≥—É–ª", callback_data="request_personal")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

@router.message(F.text == "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def show_request_types(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∏–ø—ã –∑–∞—è–≤–æ–∫"""
    user = await sync_to_async(CustomUser.objects.filter(telegram_id=message.from_user.id).first)()
    if not user:
        await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ —Å–∞–π—Ç.")
        return

    await message.answer(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:",
        reply_markup=get_request_type_menu()
    )

@router.message(F.text == "üìä –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def show_my_requests(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await sync_to_async(CustomUser.objects.filter(telegram_id=message.from_user.id).first)()
    if not user:
        await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ —Å–∞–π—Ç.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—è–≤–æ–∫
    requests = await sync_to_async(
        lambda: list(LeaveRequest.objects.filter(user=user).order_by('-created_at')[:5])
    )()

    if not requests:
        await message.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        return

    text = "üìä –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n\n"
    status_emoji = {
        'pending': '‚è≥',
        'approved': '‚úÖ',
        'rejected': '‚ùå'
    }

    for req in requests:
        duration = (req.end_date - req.start_date).days + 1
        text += (
            f"{status_emoji.get(req.status, '‚ùì')} {req.get_leave_type_display()}\n"
            f"üìÖ {req.start_date.strftime('%d.%m.%Y')} - {req.end_date.strftime('%d.%m.%Y')} ({duration} –¥–Ω.)\n"
            f"üìù –°—Ç–∞—Ç—É—Å: {req.get_status_display()}\n\n"
        )

    await message.answer(text)

@router.message(F.text == "üìÖ –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç–ø—É—Å–∫–∞")
async def show_vacation_balance(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç–ø—É—Å–∫–∞"""
    user = await sync_to_async(CustomUser.objects.filter(telegram_id=message.from_user.id).first)()
    if not user:
        await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ —Å–∞–π—Ç.")
        return

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–Ω–∏ –æ—Ç–ø—É—Å–∫–∞
    used_vacation = await sync_to_async(
        lambda: sum(
            (req.end_date - req.start_date).days + 1
            for req in LeaveRequest.objects.filter(
                user=user,
                leave_type='vacation',
                status='approved'
            )
        )
    )()

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
    pending_vacation = await sync_to_async(
        lambda: sum(
            (req.end_date - req.start_date).days + 1
            for req in LeaveRequest.objects.filter(
                user=user,
                leave_type='vacation',
                status='pending'
            )
        )
    )()

    total_vacation = 44  # –û–±—ã—á–Ω–æ 28 –¥–Ω–µ–π + –¥–æ–ø. –¥–Ω–∏
    remaining = total_vacation - used_vacation

    text = (
        f"üìä –û—Ç–ø—É—Å–∫–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üèñÔ∏è –í—Å–µ–≥–æ –æ—Ç–ø—É—Å–∫–∞ –≤ –≥–æ–¥—É: {total_vacation} –¥–Ω.\n"
        f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used_vacation} –¥–Ω.\n"
        f"‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: {pending_vacation} –¥–Ω.\n"
        f"üìÖ –û—Å—Ç–∞—Ç–æ–∫: {remaining} –¥–Ω.\n\n"
    )

    if remaining < 14:
        text += "‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ, —á—Ç–æ –æ–¥–∏–Ω –æ—Ç–ø—É—Å–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 14 –¥–Ω–µ–π!"

    await message.answer(text)

@router.message(F.text == "üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
async def voice_request_help(message: types.Message):
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≥–æ–ª–æ—Å–æ–≤—ã–º –∑–∞—è–≤–∫–∞–º"""
    user = await sync_to_async(CustomUser.objects.filter(telegram_id=message.from_user.id).first)()
    if not user:
        await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ —Å–∞–π—Ç.")
        return

    text = (
        "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞—è–≤–∫–∏\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "üìù –ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ \"–û—Ç–ø—É—Å–∫ —Å –ø–µ—Ä–≤–æ–≥–æ –ø–æ –ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–µ –¥–µ–∫–∞–±—Ä—è\"\n"
        "‚Ä¢ \"–ë–æ–ª—å–Ω–∏—á–Ω—ã–π –Ω–∞ –¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–µ –Ω–æ—è–±—Ä—è\"\n"
        "‚Ä¢ \"–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞ —Å –¥–µ—Å—è—Ç–æ–≥–æ –ø–æ –¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–µ —è–Ω–≤–∞—Ä—è\"\n\n"
        "üéØ –í–∞–∂–Ω–æ —á–µ—Ç–∫–æ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç—å:\n"
        "‚Ä¢ –¢–∏–ø (–æ—Ç–ø—É—Å–∫/–±–æ–ª—å–Ω–∏—á–Ω—ã–π/–∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞)\n"
        "‚Ä¢ –î–∞—Ç—ã (—Å... –ø–æ... –∏–ª–∏ –Ω–∞...)\n"
        "‚Ä¢ –ú–µ—Å—è—Ü –ø–æ–ª–Ω–æ—Å—Ç—å—é\n\n"
        "–ü–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å –∏ –ø–æ–∫–∞–∂–µ—Ç –∑–∞—è–≤–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )

    await message.answer(text)

@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await sync_to_async(CustomUser.objects.filter(telegram_id=message.from_user.id).first)()
    if not user:
        await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ —Å–∞–π—Ç.")
        return

    text = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üìõ –§–ò–û: {user.full_name}\n"
        f"üìß Email: {user.email}\n"
        f"üè¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {user.get_position_display()}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.date_joined.strftime('%d.%m.%Y')}\n"
        f"üÜî Telegram ID: {user.telegram_id}\n"
    )

    await message.answer(text)

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    text = (
        "ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É\n\n"
        "üìù –ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ\n"
        "‚Ä¢ /vacation - –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ç–ø—É—Å–∫\n\n"
        "üéØ –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:\n"
        "‚Ä¢ üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É - –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏\n"
        "‚Ä¢ üìä –ú–æ–∏ –∑–∞—è–≤–∫–∏ - –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫\n"
        "‚Ä¢ üìÖ –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç–ø—É—Å–∫–∞ - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n"
        "‚Ä¢ üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å\n\n"
        "‚ùì –ü—Ä–æ–±–ª–µ–º—ã?\n"
        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ HR-–æ—Ç–¥–µ–ª—É."
    )

    await message.answer(text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("request_"))
async def handle_request_type(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏"""
    request_type = callback.data.replace("request_", "")

    type_instructions = {
        "vacation": "üèñÔ∏è –î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–ø—É—Å–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /vacation –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        "sick": "üè• –î–ª—è –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–ë–æ–ª—å–Ω–∏—á–Ω—ã–π –Ω–∞ [–¥–∞—Ç–∞] [–º–µ—Å—è—Ü]'",
        "business": "‚úàÔ∏è –î–ª—è –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞ —Å [–¥–∞—Ç–∞] –ø–æ [–¥–∞—Ç–∞] [–º–µ—Å—è—Ü]'",
        "personal": "üìû –î–ª—è –æ—Ç–≥—É–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–û—Ç–≥—É–ª –Ω–∞ [–¥–∞—Ç–∞] [–º–µ—Å—è—Ü]'"
    }

    await callback.message.edit_text(
        type_instructions.get(request_type, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞—è–≤–∫–∏"),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_request_types")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_request_types")
async def back_to_request_types(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏"""
    await callback.message.edit_text(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:",
        reply_markup=get_request_type_menu()
    )
    await callback.answer()